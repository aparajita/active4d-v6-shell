/*
    Active4D Cross-Origin Resource Sharing (CORS) configuration

    Cross-Origin Resource Sharing (CORS) is a standard developed to allow servers to allow
    cross-domain requests via XMLHttpRequests (Ajax). Ordinarily XMLHttpRequest
    will not allow a request to another domain. CORS allows this if the server allows it.
    A good introduction of CORS can be found here:

    https://developer.mozilla.org/En/HTTP_access_control

    Active4D implements CORS through this configuration file. You allow CORS requests
    by specifying one or more entries, which have the following form:

    {~}URL
    origin = <origin> | "<origin>" | "*"        (case-insensitive)
    headers = <comma-delimited header list>     (case-insensitive)
    methods = <comma-delimited method list>     (case-sensitive)
    credentials = "true" | "false"              (case-sensitive)
    max-age = <delta-seconds>

    Each entry should be terminated with a line ending. You may use block and full line comments
    (not at the end of a line) just as you would with Active4D code.

    Let's go through each element of an entry:

    {~}URL
    This is the full URL, including protocol (http or https), host, port (if other than 80),
    and path (if any) that you want this entry to apply to. When Active4D receives a request
    with an Origin header, it follows these steps:

    1. Assemble a full URL from the protocol, Host header, and path of the request.
    2. If the entry URL does not begin with "~", perform a case-sensitive match
       of the entry URL to beginning of the assembled URL.
    3. If the entry URL begins with "~", treat it as a regular expression and
       do a regular expression match against the beginning of the assembled URL.

    If #2 or #3 match, then the fields in that entry are used to generate response headers.
    If there is a mismatch in any of those three, the next entry is checked. Entries
    are checked in the order they are defined here, so you should define the most specific entries
    first, followed by more general entries.

    Each of the fields in an entry specifies an Access-Control-* response header that will
    be returned. The fields are optional and map to headers as follows:

    origin      Access-Control-Allow-Origin
    headers     Access-Control-Allow-Headers
    methods     Access-Control-Allow-Methods
    credentials Access-Control-Allow-Credentials
    max-age     Access-Control-Max-Age

    If you provide NO fields for an entry, you disable CORS for URLs that match that entry.
    For an entry to be valid, it must at least have non-empty origin and headers fields.
    If the "headers" field is specified, the commonly used headers "origin", content-type"
    and "x-requested-with" are automatically added to the header list if not given.

    origin field
    ------------
    The origin field may contain one of three values:

    - A specific origin, including protocol (and port if not 80), for example http://www.mysite.com
    - The string "<origin>" (without quotes), which means to substitute the value in the Origin
      header. This allows you to match multiple hosts using a regular expression in the entry URL,
      and substitute the origin of the request in the response header.
    - The string "*" (without quotes), which matches any origin.

    Examples
    --------
    http://www.mysite.com/api/address
    origin = *
    methods = GET, POST
    // 1800 seconds = 30 minutes
    max-age = 1800

    This entry allows CORS only for an attempted GET or POST to a URL which begins with
    "http://www.mysite.com/api/address". In that case, the following response headers will be returned:

    Access-Control-Allow-Origin: *
    Access-Control-Allow-Origin: GET, POST
    Access-Control-Allow-Origin: 1800

    Another example:
    ~https?://(www.\)mysite\.com/private
    // disable

    ~https?://(www\.)mysite\.com
    origin = <origin>
    methods = GET, POST
    credentials = true

    These entries disable CORS to mysite.com or www.mysite.com, using either http or https protocol,
    but enable CORS everywhere else if the request is sent with credentials.
*/
