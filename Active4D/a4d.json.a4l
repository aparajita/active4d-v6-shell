/*
	a4d.json library

	Copyright (c) Aparajita Fishman, All Rights Reserved

	parse() method a port of https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js
*/

library "a4d.json"

	define(kDateRegex; "/(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d+), (\d{4})|(\d{4})-(\d{2})-(\d{2})(T\d{2}:\d{2}:\d{2})?/")


	/************************************************************************************************
		__load__
	************************************************************************************************/

	method "__load__"

		array text(self{"_months"}; *; "Jan"; "Feb"; "Mar"; "Apr"; "May"; "Jun"; "Jul"; "Aug"; "Sep"; "Oct"; "Nov"; "Dec")

	end method



	/************************************************************************************************
		constructor

		Purpose:	Create a JSON data object.
		Require:	Nothing
		Promise:	An object is returned to which values can be added.
		Errors:		None

		Parameters:
		$inWrap		->	Boolean			True to wrap the output in an object
		RESULT		<-	JSON object
	************************************************************************************************/

	method "new"($inWrap = true)

		$c := new collection("__class__"; current library name; "__wrap__"; $inWrap; "json"; new json)
		return ($c)

	end method



	/************************************************************************************************
		add

		Purpose:	Add a value to a JSON data object.
		Require:	$self was created with new()
		Promise:	$inValue will be output in JSON format with toJSON().
		Errors:		None

		Parameters:
		$self		->	JSON object
		$inKey		->	Text			Key for value
		$inValue	->	<any>			Value to add
		$inFilter	->	Text			Used to filter collections if $inValue is a collection
		RESULT		<-	JSON object		$self
	************************************************************************************************/

	method "add"($self; $inKey; $inValue; $inFilter = "")

		add to json($self{"json"}; $inKey; $inValue; *; $inFilter)
		return ($self)

	end method



	/************************************************************************************************
		addDateTime

		Purpose:	Add a date+time to a JSON data object.
		Require:	$self was created with new()
		Promise:	$inValue will be output in Javascript IETF datetime format with toJSON().
		Errors:		None

		Parameters:
		$self		->	JSON object
		$inKey		->	Text			Key for value
		$inDate		->	Date			Date portion of value to add
		$inTime		->	Time			Time portion of value to add
		$inTimezone	->	Number			Timezone portion of value to add
		RESULT		<-	JSON object		$self
	************************************************************************************************/

	method "addDateTime"($self; $inKey; $inDate; $inTime; $inTimezone)

		add datetime to json($self{"json"}; $inKey; $inDate; $inTime; $inTimezone)
		return ($self)

	end method



	/************************************************************************************************
		addArray

		Purpose:	Add an array to a JSON data object.
		Require:	$self was created with new()
		Promise:	$inValue will be output in JSON format with toJSON().
		Errors:		None

		Parameters:
		$self		->	JSON object
		$inKey		->	Text			Key for value
		$inArray	->	<array>			Array to add
		RESULT		<-	JSON object		$self
	************************************************************************************************/

	method "addArray"($self; $inKey; &$inArray)

		add to json($self{"json"}; $inKey; $inArray)
		return ($self)

	end method



	/************************************************************************************************
		addSelection

		Purpose:	Add a selection of records to a JSON data object as an array of subobjects.
		Require:	$self was created with new(). If $inMap is passed,
					the values of the map items must be valid field or table pointers.
		Promise:	The specified fields will be output in JSON format with toJSON().
		Errors:		None

		Parameters:
		$self		->	JSON object
		$inTable	->	->[table]		Main table from which to retrieve values
		$inCountKey	->	Text			Key of the record count item in the JSON object
		$inDataKey	->	Text			Name of the record data item in the JSON object
		$inMap		->	Text			Maps JSON column names to fields. If not passed,
										all fields of $inTable are returned and the column
										names are the field names. If passed, must be a collection
										where the keys are the column names and the values are field
										pointers or table pointers or text to execute. If a table
										pointer is used, the record number of the given table is
										returned as the column value. If text is passed, it must
										be an expression that returns a value (but "return" is not
										necessary). To execute the text in 4D, prefix it with "!".
		$inFirst	->	Longint			Index of first record in selection to add
		$inLimit	->	Longint			Limits number of records to add, -1 for no limit
		RESULT		<-	$self
	************************************************************************************************/

	method "addSelection"($self; $inTable; $inCountKey = ""; $inDataKey = ""; $inMap = 0; $inFirst = 1; $inLimit = -1)

		add selection to json($self{"json"}; $inTable->; $inCountKey; $inDataKey; $inMap; $inFirst; $inLimit)
		return ($self)

	end method



	/************************************************************************************************
		addRowSet

		Purpose:	Add a selection of rows from a RowSet to a JSON data object as an array of subobjects.
		Require:	$self was created with new(). If $inMap is passed,
					the values of the map items must be valid field or table pointers.
		Promise:	The specified fields will be output in JSON format with toJSON().
		Errors:		None

		Parameters:
		$self		->	JSON object
		$inRowSet	->	RowSet			RowSet from which to retrieve values
		$inCountKey	->	Text			Key of the row total count item in the JSON object
		$inDataKey	->	Text			Name of the row data item in the JSON object
		$inMap		->	Text			Maps JSON column names to RowSet columns. If not passed,
										all columns of $inRowSet are returned. If passed, must be
										a semicolon-delimited list of <JSON key>:<RowSet column>
										pairs. If the JSON key is not renaming the RowSet column,
										the RowSet column alone may be used.
		$inFirst	->	Longint			Index of first row in $inRowSet to add
		$inLimit	->	Longint			Limits number of records to add, -1 for no limit
		RESULT		<-	$self
	************************************************************************************************/

	method "addRowSet"($self; $inRowSet; $inCountKey = ""; $inDataKey = ""; $inMap = ""; $inFirst = 1; $inLimit = -1)

		add rowset to json($self{"json"}; $inRowSet; $inCountKey; $inDataKey; $inMap; $inFirst; $inLimit)
		return ($self)

	end method



	/************************************************************************************************
		addFunction

		Purpose:	Add a function to a JSON data object.
		Require:	$self was created with new()
		Promise:	$inFunction will be output as is with toJSON().
		Errors:		None

		Parameters:
		$self		->	JSON object
		$inKey		->	Text			Key for value
		$inFunction	->	Text			Function definition to add
		RESULT		<-	JSON object		$self
	************************************************************************************************/

	method "addFunction"($self; $inKey; $inFunction)

		add function to json($self{"json"}; $inKey; $inFunction)
		return ($self)

	end method



	/************************************************************************************************
		startObject

		Purpose:	Start a subobject within a JSON object.
		Require:	$self was created with new().
		Promise:	All values added between this call and a call to endObject() will be a subobject.
		Errors:		None

		Parameters:
		$self		->	JSON object
		$inKey		->	Text			Optional key for the subobject.
		RESULT		<-	$self
	************************************************************************************************/

	method "startObject"($self; $inKey = "")

		start json object($self{"json"}; $inKey)
		return ($self)

	end method



	/************************************************************************************************
		endObject

		Purpose:	End a subobject within a JSON object.
		Require:	$self was created with new(), startObject() was previously called.
		Promise:	All values added between this call and a previous call to startObject() will be a subobject.
		Errors:		None

		Parameters:
		$self		->	JSON object
		RESULT		<-	$self
	************************************************************************************************/

	method "endObject"($self)

		end json object($self{"json"})
		return ($self)

	end method



	/************************************************************************************************
		startArray

		Purpose:	Start an array within a JSON object.
		Require:	$self was created with new().
		Promise:	All values added between this call and a call to endArray() will be an array.
		Errors:		None

		Parameters:
		$self		->	JSON object
		$inKey		->	Text			Optional key for the array.
		RESULT		<-	$self
	************************************************************************************************/

	method "startArray"($self; $inKey = "")

		start json array($self{"json"}; $inKey)
		return ($self)

	end method



	/************************************************************************************************
		endArray

		Purpose:	End an array within a JSON object.
		Require:	$self was created with new(), startArray() was previously called.
		Promise:	All values added between this call and a previous call to startArray() will be an array.
		Errors:		None

		Parameters:
		$self		->	JSON object
		RESULT		<-	$self
	************************************************************************************************/

	method "endArray"($self)

		end json array($self{"json"})
		return ($self)

	end method



	/************************************************************************************************
		toJSON

		Purpose:	Get the values of a JSON data object in JSON format.
		Require:	$self was created with new()
		Promise:	The result is valid JSON data.
		Errors:		None

		Parameters:
		$self		->	JSON object
		RESULT		<-	Text
	************************************************************************************************/

	method "toJSON"($self)

		return (json to text($self{"json"}))

	end method



	/************************************************************************************************
		write

		Purpose:	Write the values of a JSON data object in JSON format.
		Require:	$self was created with new()
		Promise:	The result of toJSON() will be written to the response buffer.
		Errors:		None

		Parameters:
		$self				->	JSON object
		$inSetContentType	->	Boolean		True to set response content type to application/json
	************************************************************************************************/

	method "write"($self; $inSetContentType = true)

		write json($self{"json"}; $inSetContentType)

	end method



    /************************************************************************************************
        writep

        Purpose:    Write the values of a JSON data object in JSON format with a JSONP callback.
        Require:    $self was created with new()
        Promise:    A result suitable for passing to the callback to the response buffer.
        Errors:     None

        Parameters:
        $self               ->  JSON object
        $inCallback         ->  String		Callback expected by the JSONP request
        $inSetContentType   ->  Boolean     True to set response content type to application/json
    ************************************************************************************************/

    method "writep"($self; $inCallback; $inSetContentType = true)

        write jsonp($self{"json"}; $inCallback; $inSetContentType)

    end method



	/************************************************************************************************
		encode

		Purpose:	Encode a value into JSON format.
		Require:	Nothing
		Promise:	A properly formatted JSON string will be returned.
		Errors:		None

		Parameters:
		$inValue		->	<any scalar>	A non-array value to encode.
		$inFilter		->	String			Allows items to be filtered from collections.
											See encodeCollection for more info.
		RESULT			<-	Text			JSON encoded data.
	************************************************************************************************/

	method "encode"($inValue; $inFilter = "")

		return (json encode($inValue; $inFilter))

	end method


	method "encodeString"($inString)

		return (json encode($inString))

	end method


	/*
		encodeDate

		Encode a 4D date into IETF format
	*/
	method "encodeDate"($inDate)

		return (json encode($inDate))

	end method


	/*
		encodeBoolean

		Encode a 4D boolean into a JSON boolean
	*/
	method "encodeBoolean"($inBool)

		return (json encode($inBool))

	end method


	/*
		encodeArray

		Encode a 4D array into a JSON array
	*/
	method "encodeArray"(&$inArray)

		return (json encode($inArray))

	end method



	/************************************************************************************************
		encodeCollection

		Purpose:	Recursively encode a collection into JSON format.
		Require:	$inCol must be a valid collection handle.
		Promise:	A properly formatted JSON string will be returned.
		Errors:		Throws an informative error if ???.

		Parameters:
		$inCol			->	Collection	A collection with items to encode.
		$inFilter		->	String		Allows items to be filtered from the collection.
										If $inFilter begins with "#", it performs an exclusion,
										i.e. all items that match the filter are excluded.
										Otherwise only items that match the filter are included.
										If the first character after the optional # is "/",
										it is considered a regular expression pattern and regex
										matching is done. Otherwise simple string comparison
										is performed.
		RESULT			<-	Text		JSON encoded data.
	************************************************************************************************/

	method "encodeCollection"($inCol; $inFilter = "")

		return (json encode($inCol; $inFilter))

	end method



	/************************************************************************************************
		parse

		This is an Active4D port of the JavaScript recursive descent JSON parser found at
		https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js.

		This method parses JSON text into its corresponding 4D value. All valid JSON types
		and syntaxes are supported, with the exception that array elements must all be of
		the same type. JSON types map to Active4D types as follows:

		JSON type			Active4D type
		---------------		----------------
		object				collection
		array				array
		string				text
		number				real
		true/false			boolean
		null				nil pointer

		Parameters:
		$inJSON						Text		JSON data
		$inWantGlobalCollections	Boolean		If false (the default), all collections created
												from JSON objects will be local. If true, all
												collections will be global.
		$inThrowOnError				Boolean		If true (the default), malformed JSON will throw
												an error.
	************************************************************************************************/

	method "parse"($inJSON; $inWantGlobalCollections = false; $inThrowOnError = true)

		$result ::= parse json($inJSON; $inThrowOnError)

		if ($inWantGlobalCollections)
			case of
				:(type($result) = is longint)
					if (is a collection($result))
						$result := deep copy collection($result; *)
					end if

				:(type($result) = longint array)
					for each ($result; $element; $index)
						if (is a collection($element))
							$result{$index} := deep copy collection($element)
						end if
					end for each
			end case
		end if

		return ($result)

	end method



	/************************************************************************************************
		convertJSONDates

		This method recursively traverses an object and converts text that looks like dates into
		4D dates. Text will be converted if it matches one of the following patterns:

		Pattern					Comments
		--------------------	----------------------------------------------------------
		Mmm d, yyyy				Format used by this library to convert 4D dates to JSON.
								Mmm is a 3-letter English month abbreviation.
		yyyy-mm-dd
		yyyy-mm-ddThh:mm:ss		ISO Date format

		Parameters:
		$inObject	<any>		Data to convert. Valid types are text, text array,
								longint array, and collection. Longint arrays are
								traversed, and if an element is a collection,
								this method will be called recursively with that collection.
								For text arrays, if all of the elements of the array can be
								converted to dates, an array of the converted dates is returned.
								Otherwise the original text array is returned.
		$inKeys		Text		If non-empty, it should be a delimited regular expression.
								When traversing collections, only collection keys which
								match will be considered for conversion.
		RESULT		<any>		Returns a converted version of $inObject. Converted text
								arrays will be returned as date arrays, and converted text
								will be returned as a date. Otherwise the original object
								is returned.
	************************************************************************************************/

	method "convertJSONDates"(&$inObject; $inKeys = "")

		$type := type($inObject)

		case of
			:($type = is text)
				return (_convertToDate($inObject))

			:($type = is longint)
				if (is a collection($inObject))
					for each ($inObject; $key)
						if ($inKeys)
							$type := type($inObject{$key})

							if ($type = is text) | ($type = text array)
								$convert := $key =~ $inKeys
							else
								// Allow types that might contain collections
								$convert := ($type = is longint) | ($type = longint array)
							end if
						else
							$convert := true
						end if

						if ($convert)
							$inObject{$key} := convertJSONDates($inObject{$key}; $inKeys)
						end if
					end for each
				end if

			:($type = text array)
				array date($dates; size of array($inObject))
				$isAllDates := true

				for each ($inObject; $element; $index)
					$date := _convertToDate($element)

					if (type($date) = is date)
						$dates{$index} := $date
					else
						$inObject{$index} := $date
						$isAllDates := false
					end if
				end for each

				if ($isAllDates)
					return ($dates)
				end if

			:($type = longint array)
				for each ($inObject; $element; $index)
					if (is a collection($element))
						$inObject{$index} := convertJSONDates($element; $inKeys)
					end if
				end for each
		end case

		return ($inObject)

	end method


	method "_convertToDate"($inText)

		if (regex match(kDateRegex; $inText; $matches))
			case of
				:($matches{1})  // Mmm d, yyyy
					$month := find in array(self{"_months"}; $matches{1})

					if ($month > 0)
						$year := num($matches{3})
						$day := num($matches{2})
						return (add to date(!00/00/00!; $year; $month; $day))
					end if

				:($matches{4})  // yyyy-mm-dd and yyyy-mm-ddThh:mm:ss
					$year := num($matches{4})
					$month := num($matches{5})
					$day := num($matches{6})
					return (add to date(!00/00/00!; $year; $month; $day))
			end case
		end if

		return ($inText)

	end method

end library
